/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
SuperSynthAudioProcessorEditor::SuperSynthAudioProcessorEditor (AudioProcessor& parent, AudioProcessorValueTreeState& vts)
: AudioProcessorEditor (parent), valueTreeState (vts)
{
/*amp, wave, pitch, voices, detune
  pan, phase, fine, pw,     Spread*/
    

    oscillator = new OscillatorComponent(valueTreeState);

    addAndMakeVisible (oscillator);
    
    filter = new FilterComponent();
    //addAndMakeVisible (filter);

    
    setSize (oscillator->getWidth() + filter->getWidth(),oscillator->getHeight() + oscillator->getHeight());
}

SuperSynthAudioProcessorEditor::~SuperSynthAudioProcessorEditor()
{
    delete oscillator;
    delete filter;
}

//==============================================================================
void SuperSynthAudioProcessorEditor::paint (Graphics& g)
{
    //g.fillAll (Colours::white);
    g.setColour (Colours::black);//white
    /*g.setFont (20.0f);
    g.drawFittedText ("YEAAH", getLocalBounds(), Justification::centred, 1);*/
    
    g.fillRect (getLocalBounds());
}

void SuperSynthAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    // sets the position and size of the slider with arguments (x, y, width, height)

        Rectangle<int> r = getLocalBounds();
        
        {
            oscillator->setBounds (r);
            //filter->setBounds (r);
           
        }

        

}
/*
void SuperSynthAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == globalLevel)
    {
        processor.setGlobalLevel(globalLevel->getValue());
    }
    else//if (slider == &detune)
    {
        processor.setDetune(((Slider *) (oscillators[0]->findChildWithID("detune")))->getValue());
    }
    //processor.globalLevel = oscillator1.volume.getValue();
}

void SuperSynthAudioProcessorEditor::timerCallback()
{
                globalLevel->setValue (processor.getGlobalLevel());
                ((Slider *)(oscillators[0]->findChildWithID("detune")))->setValue(processor.getDetune());
}

void SuperSynthAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioParameterFloat* param = getParameterForSlider (slider))
        param->beginChangeGesture();
}
void SuperSynthAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioParameterFloat* param = getParameterForSlider (slider))
        param->endChangeGesture();
}*/