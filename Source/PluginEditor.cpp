/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginEditor.h"


//==============================================================================
SuperSynthAudioProcessorEditor::SuperSynthAudioProcessorEditor (AudioProcessor& parent, AudioProcessorValueTreeState& vts)
:
    AudioProcessorEditor (parent),
    valueTreeState (vts),
    keyboardComponent (keyboardState, MidiKeyboardComponent::horizontalKeyboard)
{
    setLookAndFeel (&otherLookAndFeel);
    addAndMakeVisible (keyboardComponent);
    addAndMakeVisible (modulationMatrix = new ModulationMatrixComponent());

    addAndMakeVisible (oscillator = new OscillatorComponent(valueTreeState));

    addAndMakeVisible (filter = new FilterComponent(valueTreeState));
    
    setSize (oscillator->getWidth()*4 + modulationMatrix->getWidth(),oscillator->getHeight() + filter->getHeight() + 100);
}

SuperSynthAudioProcessorEditor::~SuperSynthAudioProcessorEditor()
{
    oscillator = nullptr;
    filter = nullptr;
    modulationMatrix = nullptr;
}

//==============================================================================
void SuperSynthAudioProcessorEditor::paint (Graphics& g)
{
    //g.fillAll (Colours::white);
    g.setColour (Colours::black);
    /*g.setFont (20.0f);
    g.drawFittedText ("YEAAH", getLocalBounds(), Justification::centred, 1);*/
    
    g.fillRect (getLocalBounds());
}

void SuperSynthAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    // sets the position and size of the slider with arguments (x, y, width, height)
    keyboardComponent.setSize (oscillator->getWidth()*4 + modulationMatrix->getWidth(), 100);//width,height
    
    Rectangle<int> r = getLocalBounds();
    Rectangle<int> keyboardSection = r.removeFromBottom(keyboardComponent.getHeight());
    Rectangle<int> processorsSection = r.removeFromLeft(oscillator->getWidth());
        
    {
    oscillator->setBounds(processorsSection.removeFromTop(oscillator->getHeight()));
    filter->setBounds(processorsSection.removeFromLeft(filter->getWidth()));
    modulationMatrix->setBounds(r.removeFromRight(modulationMatrix->getWidth()));
    keyboardComponent.setBounds(keyboardSection.removeFromTop(keyboardComponent.getHeight()));
    }
}
/*
void SuperSynthAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == globalLevel)
    {
        processor.setGlobalLevel(globalLevel->getValue());
    }
    else//if (slider == &detune)
    {
        processor.setDetune(((Slider *) (oscillators[0]->findChildWithID("detune")))->getValue());
    }
    //processor.globalLevel = oscillator1.volume.getValue();
}

void SuperSynthAudioProcessorEditor::timerCallback()
{
                globalLevel->setValue (processor.getGlobalLevel());
                ((Slider *)(oscillators[0]->findChildWithID("detune")))->setValue(processor.getDetune());
}

void SuperSynthAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioParameterFloat* param = getParameterForSlider (slider))
        param->beginChangeGesture();
}
void SuperSynthAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioParameterFloat* param = getParameterForSlider (slider))
        param->endChangeGesture();
}*/