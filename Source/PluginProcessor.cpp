/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
SuperSynthAudioProcessor::SuperSynthAudioProcessor()
: parameters (*this, nullptr)
{
    /*parameters.createAndAddParameter ("waveType", // parameter ID
                                  "waveType",// parameter name
                                  String(),// parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f, 1.0f),// range
                                  0.0f,// default value
                                  [](float value)
                                  {
                                      // value to text function
                                      return value < 0.5 ? "Sine" : "Saw";
                                  },
                                  [](const String& text)
                                  {
                                      // text to value function
                                      if (text == "Sine")    return 0.0f;
                                      if (text == "Saw")  return 1.0f;
                                      return 0.0f;
                                  });*/



                         
    /*
                       


    parameters.createAndAddParameter ("voiceNumber", // parameter ID
                                  "voiceNumber",// parameter name
                                  String(),// parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 8.0f, 1.0f),// range
                                  4.0f,// default value
                                  [](float value)
                                  {
                                      // value to text function
                                      return value < 4.0 ? "2" : "4";
                                  },
                                  [](const String& text)
                                  {
                                      // text to value function
                                      if (text == "2")    return 2.0f;
                                      if (text == "4")  return 4.0f;
                                      return 6.0f;
                                  });*/
    parameters.createAndAddParameter ("retrig", // parameter ID
                                  "retrig",// parameter name
                                  String(),// parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f, 1.0f),// range
                                  0.0f,// default value
                                  [](float value)
                                  {
                                      // value to text function
                                      return value < 0.5 ? "Off" : "On";
                                  },
                                  [](const String& text)
                                  {
                                      // text to value function
                                      if (text == "Off")    return 0.0f;
                                      if (text == "On")  return 1.0f;
                                      return 0.0f;
                                  });
                                  
    parameters.createAndAddParameter ("amplitude",       // parameter ID
                                  "amplitude",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  1.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("pan",       // parameter ID
                                  "pan",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.5f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("waveType",       // parameter ID
                                  "waveType",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.5f,         // default value
                                  nullptr,
                                  nullptr);
                                  
                                  
    parameters.createAndAddParameter ("pitch",       // parameter ID
                                  "pitch",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("fine",       // parameter ID
                                  "fine",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
                                  
    parameters.createAndAddParameter ("phase",       // parameter ID
                                  "phase",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    /*parameters.createAndAddParameter ("retrig",       // parameter ID
                                  "retrig",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);*/
                                  
    parameters.createAndAddParameter ("pulseWidth",       // parameter ID
                                  "pulseWidth",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("voiceNumber",       // parameter ID
                                  "voiceNumber",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 8.0f, 1.0f),    // range
                                  8.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("detune",       // parameter ID
                                  "detune",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);

    parameters.createAndAddParameter ("spread",       // parameter ID
                                  "spread",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("ampAttack",       // parameter ID
                                  "ampAttack",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("ampSustain",       // parameter ID
                                  "ampSustain",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("ampRelease",       // parameter ID
                                  "ampSustain",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("filterAttack",       // parameter ID
                                  "filterAttack",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("filterSustain",       // parameter ID
                                  "filterSustain",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("filterRelease",       // parameter ID
                                  "filterSustain",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.0f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.createAndAddParameter ("globalLevel",       // parameter ID
                                  "globalLevel",       // parameter name
                                  String(),     // parameter label (suffix)
                                  NormalisableRange<float> (0.0f, 1.0f),    // range
                                  0.5f,         // default value
                                  nullptr,
                                  nullptr);
                                  
    parameters.state = ValueTree (Identifier ("Supersynth"));

    //initializing the synth 
    const int numVoices = 128;//128 voices
    // Add some voices...
    for (int i = numVoices; --i >= 0;)
        synth.addVoice (new SineWaveVoice(parameters));
    // ..and give the synth a sound to play
    synth.addSound (new SineWaveSound());

}

SuperSynthAudioProcessor::~SuperSynthAudioProcessor()
{
}

//==============================================================================
const String SuperSynthAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String SuperSynthAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String SuperSynthAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool SuperSynthAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool SuperSynthAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool SuperSynthAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SuperSynthAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SuperSynthAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double SuperSynthAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int SuperSynthAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SuperSynthAudioProcessor::getCurrentProgram()
{
    return 0;
}

void SuperSynthAudioProcessor::setCurrentProgram (int index)
{
}

const String SuperSynthAudioProcessor::getProgramName (int index)
{
    return String();
}

void SuperSynthAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void SuperSynthAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)//Called before playback starts, to let the filter prepare itself.
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    synth.setCurrentPlaybackSampleRate (sampleRate);
}

void SuperSynthAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}




void SuperSynthAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    
    //Gestion des midiEvents
/*    int time;
    MidiMessage m;
 
    for (MidiBuffer::Iterator i (midiMessages); i.getNextEvent (m, time);)
    {
        if (m.isNoteOn())
        {
            //m.getNoteNumber();
        }
        else if (m.isNoteOff())
        {
        }
        else if (m.isAftertouch())
        {
        }
        else if (m.isPitchWheel())
        {
        }
    
    }
*/    
    
    
    
    
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    const int numSamples = buffer.getNumSamples();
    synth.renderNextBlock (buffer, midiMessages, 0, numSamples);
    buffer.applyGain (*parameters.getRawParameterValue ("globalLevel"));
    
 
}

//==============================================================================
bool SuperSynthAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* SuperSynthAudioProcessor::createEditor()
{
    return new SuperSynthAudioProcessorEditor (*this, parameters);
}

//==============================================================================
void SuperSynthAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.

    ScopedPointer<XmlElement> xml (parameters.state.createXml());
    copyXmlToBinary (*xml, destData);

}

void SuperSynthAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));
    if (xmlState != nullptr)
        if (xmlState->hasTagName (parameters.state.getType()))
            parameters.state = ValueTree::fromXml (*xmlState);
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new SuperSynthAudioProcessor();
}